#summary Ways to wire up JRDF and entry points

= JRDF and IoC =
Inversion of Control (IoC) is used to decouple the various dependencies in JRDF.  The IoC container used in the JRDF GUI and testing is Spring (2.0.1).  For the main code base (everything except org.jrdf.gui at the moment) constructors are injected with their dependencies and there is no explict use of Spring code or interfaces.  This allows objects to be constructed normally or another IoC container to be used.

== Using Spring ==
Spring is a popular IoC container.  Using Spring with JRDF allows:
  * Easier testing that comes with the use of inversion of control,
  * The ability to switch in different implementations (such as different implementations of query operations such as OPTIONAL),
  * The future use of existing Spring libraries and extensions.  This includes declarative transactions, JPA, Aspects, Spring Rich Client, and AOP.
  * Allows integration into other Spring enabled projects.

The creation of objects through the container is often called wiring.  JRDF comes with a XML configuration file (wiring.xml) that defines the creation of various objects.  This includes the lifecycle of the beans and whether the a bean is a singleton (only one instance) or a prototype (instances created new every time).  Spring 2.0 provides a new, custom scope, which allows scopes to be tied to other lifecycles such as threads or HTTP sessions.

However, it is clear that Spring and most IoC containers are a rather large requirement for most projects.  With this in mind the use of the JRDF code without an IoC is kept in mind in order to retain ease of use without one.

== Without Spring ==
The use of IoC can be taken to the finest level, where each object is created through the container and constructors are never used.  This finest level of control has two main drawbacks:
  * It is not clear through the list of bean wiring exactly the order in which bean are created or rather what objects are at the top of the depency tree.
  * That no objects can be created without an IoC framework.

In order to find a balance between wiring everything and wiring very few things entry points have been defined to allow the user of a system determine not only how to use JRDF without an IoC container but it also reduces the complexity in determining what to wire up if a container is already being used.

= Entry Points =
In order to use JRDF it must be obvious where to start - that is what are the first objects that need to be created.  This has to be available and clear even if a wiring framework, such as Spring, is not available.

JRDF has two entry points: Graph and SPARQL connection.

== JRDF Graph ==

The JRDF Graph API supports pluggable storage through the LongIndex and NodePool interfaces and the ability to produce results from simple graph queries that are sorted or unsorted.  An a third interface, NodePoolComparator, is an optional third interface required by sorted graphs.

=== Implementations of LongIndex and NodePool ===

There is currently in memory implementations for both LongIndex and NodePool interfaces.  JRDF requires three long indexes (in order to index each combination of triples which is through the GraphHandler interface),  These indexes are arranged in 012, 120 and 201, where 0 refers to subject nodes, 1 refers to predicate nodes and 2 refers to object nodes.  

==== In Memory ====
In order to create in memory implementations the following code is required:
{{{
LongIndex[] indexes = new LongIndex[]{new LongIndexMem(), new LongIndexMem(), new LongIndexMem()};
NodePoolMem nodePool = new NodePoolMemImpl();
}}}

=== Constructing GraphFactories ===

The GraphFactory interface has two implementations GraphFactoryImpl (unsorted results returned) and OrderedGraphFactoryImpl (sorted results returned).

To construct an unsorted GraphFactory the following code is required:
{{{
GraphFactory orderedGraphFactory = new GraphFactoryImpl(indexes, nodePool);
}}}

To construct a sorted GraphFactory:
{{{
NodeTypeComparator nodeTypeComparator = new NodeTypeComparatorImpl();
NodeComparator comparator = new NodeComparatorImpl(nodeTypeComparator);
GraphFactory orderedGraphFactory = new OrderedGraphFactoryImpl(indexes, nodePool, comparator);
}}}

=== Spring Wiring Fragment ===

The following creates an in memory, graph that returns sorted results using Spring's XML configuration file instead.

{{{
    <bean class="org.jrdf.graph.index.longindex.mem.LongIndexMem" singleton="false"/>

    <bean class="org.jrdf.graph.index.nodepool.mem.NodePoolMemImpl" singleton="false"/>

    <bean id="graphFactory" class="org.jrdf.graph.mem.OrderedGraphFactoryImpl" singleton="false">
        <constructor-arg>
            <list>
                <ref bean="org.jrdf.graph.index.longindex.mem.LongIndexMem"/>
                <ref bean="org.jrdf.graph.index.longindex.mem.LongIndexMem"/>
                <ref bean="org.jrdf.graph.index.longindex.mem.LongIndexMem"/>
            </list>
        </constructor-arg>
        <constructor-arg ref="org.jrdf.graph.index.nodepool.mem.NodePoolMemImpl"/>
        <constructor-arg>
            <ref bean="nodeComparator"/>
        </constructor-arg>
    </bean>

    <bean id="nodeTypeComparator" class="org.jrdf.util.NodeTypeComparatorImpl"/>

    <bean id="nodeComparator" class="org.jrdf.graph.mem.NodeComparatorImpl">
        <constructor-arg>
            <ref bean="nodeTypeComparator"/>
        </constructor-arg>
    </bean>
}}}

== SPARQL Connection ==
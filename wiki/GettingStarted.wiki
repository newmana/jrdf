#summary Getting Started with Local JRDF Graphs

= Getting Started with JRDF Local Graphs =

== Graph and Graph Element Factory ==

To create a local graph you must use a Factory - either an in memory factory or an on disk one.  A local graph requires the creation of RDF structures (triples, literals, URI References, etc.) from a specific RDF graph.  This is done using a Graph Element Factory and Triple Factory to create these structures.

To create an in memory graph factory, create a new graph and add the triple "urn:node, urn:node, urn:node" requires the following code:

{{{
JRDFFactory jrdfFactory = SortedMemoryJRDFFactory.getFactory();
Graph graph = jrdfFactory.getNewGraph();
GraphElementFactory elementFactory = graph.getElementFactory();
Node node = elementFactory.createURIReference(URI.create("urn:node"));
graph.add(node, node, node);
}}}

To create an on disk graph replace the first line with (this current requires db4o and BDB Java Edition installed in the class path):
{{{
JRDFFactory jrdfFactory = SortedDiskJRDFFactory.getFactory();
}}}

=== Literals ===

The Element Factory also allows the creation of literals.  To create the typed literal "Hello World"^^xsd:String:

{{{
...
Node node = elementFactory.createURIReference(URI.create("urn:node"));
Literal literal = elementFactory.createLiteral("Hello World", org.jrdf.vocabulary.XSD.STRING);
graph.add(node, node, literal);
}}}

=== Blank Nodes ===

Blank nodes can also be created using the Element Factory:

{{{
...
Node node1 = elementFactory.createURIReference(URI.create("urn:node"));
Node node2 = elementFactory.createBlankNode();
graph.add(node2, node1, node2);
}}}

== Triple Factory ==

The Triple factory offers a short cut for some frequent operations and creating RDF data structures.  It allows you to add triples directly to the Graph without having to create the individual nodes first, resources, reify triples and add RDF containers (Bag, Alt, Collection and Sequence).

=== URI Reference ===

To create a triple with URI References requires the following code:

{{{
...
URI node = URI.create("urn:node");
tripleFactory.add(node, node, node);
}}}

=== Literals ===

To create literals, replace the last parameter with one or two parameters specifying the Literal.  For example, to create a literal with a data type of "xsd:string" requires the following code:

{{{
...
URI node = URI.create("urn:node");
tripleFactory.add(node, node, "Hello World", org.jrdf.vocabulary.XSD.STRING);
}}}

=== Blank Nodes ===
Blank nodes are a more difficult to add as the blank node made need to be added to many triples.  For example:

{{{
_1 urn:node urn:node
urn:node urn:node _1
}}}

So they cannot be added using the TripleFactory and must use the Graph Element Factory and add them to the Graph.

=== Resources ===

=== Reifying Triples ===

=== Creating RDF Containers ===